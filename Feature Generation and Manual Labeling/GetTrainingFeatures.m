% Script for generation of features. Saves a file called 
% "TrainingFeatures.mat" in the image folder, containing all training data,
% together with an association if a data point belongs to a true positive
% or true negative signal -> variables called: 'TPFeatures','TNFeatures'
% To do so, each folder containing images needs to contain 2 additional
% .mat files containing the true negative and true positive data and must
% be named "Training TN.mat" and "Training TP.mat". These data files can be
% obtained using "GetTrainingDataTN.m" or "GetTrainingDataTP",
% respectively.
% Also a "filterbank.mat" file is supposed to be present in the folder
% containing this file. It can be generated by the file
% "GenerateFilterBank.m".

clear all;

%% Input parameters:
% Parameters for feature generation:
% Needs to be identical to the values of the training
% sigma = standard deviation of gaussian filters -> also sets 
% window size of used filter
sigma =  [1,3,6];
% Top hat filter sizes used:
TopHatSizes = [3,4,5,7,9,13,15,18];
% Entropy filter sizes used:
EntropySizes = [3,5,7,9,13,17];

%% 
% Get path of m-file:
FilePath = fileparts(mfilename('fullpath'));
addpath(FilePath);  % Adds the path where the m-files are stored in
addpath(strcat(FilePath,'\HelperFunctions'))
% load previously generated FilterBank. Needs to be in the same folder as
% the current .m-file:
load('FilterBank.mat');

% Go to folder containing the subfolders with image stacks:
Startpath = FilePath;
ImPath=uigetdir(Startpath, 'Chose the folder with the images');
cd(ImPath);   % legt ImPath als aktuellen folder fest
FolderList = dir();

% Remove non-directory entries:
count = 0;
Idx = [];
for i = 1:length(FolderList)
    if FolderList(i).isdir == 0
        count = count+1;
        Idx(count) = i;
    end
end
FolderList(Idx) = [];

% Save current directory:
CurrDir = pwd;
% Allocate variables:
TPFeatures = cell(length(FolderList)-2,1);
TNFeatures = cell(length(FolderList)-2,1);
% go through all folders and load the TN and TP data, if it exists:
for FolderNum = 3:length(FolderList)
    FolderNum
    
    % Get most frequent image associated file extension:
    [extension] = GetExtension(strcat(ImPath,'\',FolderList(FolderNum).name));
    % Get the filenames:
    FileNamesTif  = dir(fullfile(FolderList(FolderNum).name, sprintf('*%s',extension)));
    FileNamesTif = {FileNamesTif.name};
    m = numel(FileNamesTif);
    bilder=[]; 
    % Get .mat files only:
    extension = '.mat';
    FileNamesMat  = dir(fullfile(FolderList(FolderNum).name, sprintf('*%s',extension)));
    FileNamesMat = {FileNamesMat.name};
    
    % Go to subfolder:
    cd(FolderList(FolderNum).name); 
    % Read all files.
    stack = [];
    tic
    count = 1;
    for k=1:m
        % Filename
        d = FileNamesTif{k};
        % Get the file
        f = fullfile(FolderList(FolderNum).name , d);
        bilder = imread(f);
        if size(bilder,3) == 3
            bilder=rgb2gray(bilder);
        end
        if isa(bilder,'uint8')
            stack(:,:,count)=bilder;
        elseif isa(bilder,'uint16') || isa(bilder,'uint32')
            stack(:,:,count)=im2uint8(bilder);
        end
        clear bilder
        count  = count + 1;
    end
    toc
    % Rescale input image:
    NormedStack = (double(stack)-min(stack(:))) ./ (max(stack(:))-min(stack(:)));

    % Check existance of TP/TN-lists:
    ExistTN = 0;
    ExistTP = 0;
    % Check if traning files exist and if so load them:
    if any(strcmp(FileNamesMat,'Training TN.mat'))
        load('Training TN.mat')
        ExistTN = 1;
    end    
    if any(strcmp(FileNamesMat,'Training TP.mat'))
        load('Training TP.mat')
        ExistTP = 1;
    end    
    
    % Generate feature space:
    Features = GenFeatures(NormedStack,sigma,FiltDirGD,FiltLG,TopHatSizes,EntropySizes); 
    % Number of features:
    NumFeatures = size(Features,3);
    % Divide features into TP and TN signals and save them:
    for i = 1:NumFeatures
        TmpFeatures = Features(:,:,i);
        if ExistTP == 1
            if ~isempty(TPList)
                TPFeaturesTMP(:,i) = TmpFeatures(TPList);
                TPFeatures{FolderNum-2} = TPFeaturesTMP;
            end
        end
        if ExistTN == 1
            if ~isempty(TNList)
                TNFeaturesTMP(:,i) = TmpFeatures(TNList);
                TNFeatures{FolderNum-2} = TNFeaturesTMP;
            end
        end
    end    
    % Go back to initial folder:
    cd(CurrDir);             
    % Removes unnescessary variables
    clear TNList TPList TPFeaturesTMP TNFeaturesTMP
end
% Save data:
save('TrainingFeatures.mat','TPFeatures','TNFeatures')



